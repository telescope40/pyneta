## Netmiko1

_author_ ='ldevicto'


import netmiko
import time
import sys
import getpass


def user_credentials_prompt():
    """ user credentials prompt """

    # user message
    usr_msg = "\nPlease type in your router credentials."
    print(usr_msg)

    # user credential prompt
    user = raw_input('User: ')
    password = getpass.getpass('Password: ')
    secret = getpass.getpass('Secret: ')

    return user, password, secret

class Show_Quick:
    ''' Send show commands to many devices '''

    def __init__(self):
        #Variable initialization
        self.devices = self.read_devices_text_file()
        self.commands = self.read_commands_text_file()
        self.logname = self.ask_usr_filename()
        self.print_screen = self.ask_user_if_print_to_screen()
        self.user, self.password, self.secret = user_credentials_prompt()

        # log data
        self.log = {}

    def ask_usr_filename(self):
        file_name = raw_input("Enter the filename:")
        if file_name.endswith('.txt'):
            return file_name.strip()
        else:
            return file_name.strip() + '.txt'
        
    def ask_user_if_print_to_screen(self):
        user_input = raw_input("\nPrint to the screen? (y/n) ")

        if user_input.lower() == 'y':
            return True
        else:
            return False

    def read_devices_text_file(self):
        ''' read device list in device.txt file'''
        '''Create Dictionary '''
        devices = {}
        # Read Only File # 
        with open('devices.txt','r') as fn:
            for line in fn.read().splitlines():
                if line is '':
                    continue
                if ',' in line:
                    #First half is device
                    device = line.split(',')[0].strip()
                    # Second half is device type
                    device_type = line.split(',')[1].strip()
                    # Build the dictionary
                    devices[device] = device_type

                else:
                    #assume device type is cisoo_ios_telnet
                    device = line
                    # device type is cisco ios
                    device_type = 'cisco_ios_telnet'
                    # build the dictionary as specified
                    devices[device] = device_type

        return devices
                    
    def read_commands_text_file(self):
        """ read commands text file """

        # initialize the resultant datastructure
        commands = []

        # open the commands text file in read-only mode
        with open('commands.txt', 'r') as fn:

            # iterate through the lines in the text file
            for line in fn.read().splitlines():

                # skip empty lines
                if line is '':
                    continue

                commands.append(line)

        return commands                          


    def display_warning_to_user(self):
        """ display warning to user
        show user the commands + switches and ask if they
        would still like to proceed or not """

        user_message = "\nYou are about to run the following commands:"
        print(user_message)

        for command in self.commands:
            print(command)

        user_message = "\nOn the following devices:"
        print(user_message)

        for device in sorted(self.devices.keys()):
            print(device)

        user_message = "\nAre you sure you wish to proceed? (y/n) "
        user_input = raw_input(user_message)

        if user_input.lower() == 'y':
            return True
        else:
            return False
        
    def run_commands(self):
      #Method to run commands

      for device, device_type in sorted(self.devices.items()):
          user_message = 'Running requested commands on ' + device.upper()
          print user_message

          network_device_param = {
            'device_type':device_type,
            'ip':device,
            'username':self.user,
            'password':self.password,
            'global_delay_factor': 1,
            'secret':self.secret,

            }

          # Initiate the connection from Netmiko
          net_connect = netmiko.ConnectHandler(**network_device_param)

          if net_connect.find_prompt().endswith('>'):
              net_connect.enable()
              continue
              # otherwise assume show commands
          out = net_connect.send_command(line.strip())
                #Add to log
          self.log[device] += '\n\n' + device + "# " + line.strip() + "\n"
          self.log[device] += out

          if self.print_screen:
            user_message = "Running"
            print(user_message)
            print(out)

          net_connect.disconnect()


    def write_log(self):
        """ write log """

        with open(self.logname, 'w') as fn:
            for device, logdata in sorted(self.log.items()):
                # header information
                fn.write("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n")
                fn.write(device + "\n")
                fn.write("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")

                # write actual log data
                for line in logdata.splitlines():
                    fn.write(line + '\n')

                fn.write('\n')
                fn.close()

def main():
    """ main function to run script """


    # initialize script
    sh_script = Show_Quick()

    # only run script if user is comfortable with suggested updates
    if sh_script.display_warning_to_user():
        sh_script.run_commands()
        sh_script.write_log()

    # pauses the script at the end to state message
    input("\nComplete!")

if __name__ == '__main__':
    main()

    
